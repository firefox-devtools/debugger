// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Editor should render 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="editor-wrapper"
>
    <div
        className="editor-mount devtools-monospace"
        style={
            Object {
                "height": "calc(100% - var(--editor-footer-height))",
              }
        }
    />
</div>,
  "nodes": Array [
    <div
      className="editor-wrapper"
>
      <div
            className="editor-mount devtools-monospace"
            style={
                  Object {
                        "height": "calc(100% - var(--editor-footer-height))",
                      }
            }
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 1,
      "_context": Object {},
      "_currentElement": <Editor
        addBreakpoint={[Function]}
        addExpression={[Function]}
        addOrToggleDisabledBreakpoint={[Function]}
        breakpoints={
                Immutable.Map {
                }
        }
        clearPreview={[Function]}
        disableBreakpoint={[Function]}
        enableBreakpoint={[Function]}
        getExpression={[Function]}
        query=""
        removeBreakpoint={[Function]}
        searchModifiers={
                Object {
                        "caseSensitive": false,
                        "regexMatch": false,
                        "wholeWord": false,
                      }
        }
        setBreakpointCondition={[Function]}
        toggleBreakpoint={[Function]}
        toggleConditionalBreakpointPanel={[Function]}
        toggleDisabledBreakpoint={[Function]}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Editor {
        "_reactInternalInstance": [Circular],
        "cbPanel": null,
        "closeConditionalPanel": [Function],
        "context": Object {
          "shortcuts": undefined,
        },
        "lastJumpLine": null,
        "onEscape": [Function],
        "onGutterClick": [Function],
        "onGutterContextMenu": [Function],
        "onSearchAgain": [Function],
        "onToggleBreakpoint": [Function],
        "pendingJumpLocation": null,
        "props": Object {
          "addBreakpoint": [Function],
          "addExpression": [Function],
          "addOrToggleDisabledBreakpoint": [Function],
          "breakpoints": Immutable.Map {
},
          "clearPreview": [Function],
          "disableBreakpoint": [Function],
          "enableBreakpoint": [Function],
          "getExpression": [Function],
          "query": "",
          "removeBreakpoint": [Function],
          "searchModifiers": Object {
            "caseSensitive": false,
            "regexMatch": false,
            "wholeWord": false,
          },
          "setBreakpointCondition": [Function],
          "toggleBreakpoint": [Function],
          "toggleConditionalBreakpointPanel": [Function],
          "toggleDisabledBreakpoint": [Function],
        },
        "refs": Object {},
        "state": Object {
          "editor": null,
          "highlightedLineRange": null,
        },
        "toggleConditionalPanel": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 4,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          className="editor-wrapper"
>
          <div
                    className="editor-mount devtools-monospace"
                    style={
                              Object {
                                        "height": "calc(100% - var(--editor-footer-height))",
                                      }
                    }
          />
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="editor-wrapper"
>
          <div
                    className="editor-mount devtools-monospace"
                    style={
                              Object {
                                        "height": "calc(100% - var(--editor-footer-height))",
                                      }
                    }
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Editor
    addBreakpoint={[Function]}
    addExpression={[Function]}
    addOrToggleDisabledBreakpoint={[Function]}
    breakpoints={
        Immutable.Map {
        }
    }
    clearPreview={[Function]}
    disableBreakpoint={[Function]}
    enableBreakpoint={[Function]}
    getExpression={[Function]}
    query=""
    removeBreakpoint={[Function]}
    searchModifiers={
        Object {
            "caseSensitive": false,
            "regexMatch": false,
            "wholeWord": false,
          }
    }
    setBreakpointCondition={[Function]}
    toggleBreakpoint={[Function]}
    toggleConditionalBreakpointPanel={[Function]}
    toggleDisabledBreakpoint={[Function]}
/>,
}
`;
