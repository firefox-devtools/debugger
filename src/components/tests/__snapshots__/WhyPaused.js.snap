// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WhyPaused should pause reason with message 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="pane why-paused"
>
    <div />
    <div
        className="message"
    >
        bla is hit
    </div>
</div>,
  "nodes": Array [
    <div
      className="pane why-paused"
>
      <div />
      <div
            className="message"
      >
            bla is hit
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <WhyPaused
        pauseInfo={
                Immutable.Map {
                        why: Immutable.Map {
                                type: "breakpoint",
                                message: "bla is hit",
                        },
                }
        }
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": WhyPaused {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "pauseInfo": Immutable.Map {
            why: Immutable.Map {
                        type: "breakpoint",
                        message: "bla is hit",
            },
},
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          className="pane why-paused"
>
          <div />
          <div
                    className="message"
          >
                    bla is hit
          </div>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="pane why-paused"
>
          <div />
          <div
                    className="message"
          >
                    bla is hit
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <WhyPaused
    pauseInfo={
        Immutable.Map {
            why: Immutable.Map {
                type: "breakpoint",
                message: "bla is hit",
            },
        }
    }
/>,
}
`;

exports[`WhyPaused should show pause reason with exception details 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="pane why-paused"
>
    <div />
    <div
        className="message"
    >
        ReferenceError: o is not defined
    </div>
</div>,
  "nodes": Array [
    <div
      className="pane why-paused"
>
      <div />
      <div
            className="message"
      >
            ReferenceError: o is not defined
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <WhyPaused
        pauseInfo={
                Immutable.Map {
                        why: Immutable.Map {
                                type: "exception",
                                exception: Immutable.Map {
                                        class: "Error",
                                        preview: Immutable.Map {
                                                name: "ReferenceError",
                                                message: "o is not defined",
                                        },
                                },
                        },
                }
        }
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": WhyPaused {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "pauseInfo": Immutable.Map {
            why: Immutable.Map {
                        type: "exception",
                        exception: Immutable.Map {
                                    class: "Error",
                                    preview: Immutable.Map {
                                                name: "ReferenceError",
                                                message: "o is not defined",
                                    },
                        },
            },
},
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          className="pane why-paused"
>
          <div />
          <div
                    className="message"
          >
                    ReferenceError: o is not defined
          </div>
</div>,
        "_debugID": 4,
        "_renderedOutput": <div
          className="pane why-paused"
>
          <div />
          <div
                    className="message"
          >
                    ReferenceError: o is not defined
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <WhyPaused
    pauseInfo={
        Immutable.Map {
            why: Immutable.Map {
                type: "exception",
                exception: Immutable.Map {
                    class: "Error",
                    preview: Immutable.Map {
                        name: "ReferenceError",
                        message: "o is not defined",
                    },
                },
            },
        }
    }
/>,
}
`;

exports[`WhyPaused should show pause reason with exception string 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="pane why-paused"
>
    <div />
    <div
        className="message"
    >
        Not Available
    </div>
</div>,
  "nodes": Array [
    <div
      className="pane why-paused"
>
      <div />
      <div
            className="message"
      >
            Not Available
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <WhyPaused
        pauseInfo={
                Immutable.Map {
                        why: Immutable.Map {
                                type: "exception",
                                exception: "Not Available",
                        },
                }
        }
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": WhyPaused {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "pauseInfo": Immutable.Map {
            why: Immutable.Map {
                        type: "exception",
                        exception: "Not Available",
            },
},
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          className="pane why-paused"
>
          <div />
          <div
                    className="message"
          >
                    Not Available
          </div>
</div>,
        "_debugID": 6,
        "_renderedOutput": <div
          className="pane why-paused"
>
          <div />
          <div
                    className="message"
          >
                    Not Available
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <WhyPaused
    pauseInfo={
        Immutable.Map {
            why: Immutable.Map {
                type: "exception",
                exception: "Not Available",
            },
        }
    }
/>,
}
`;
