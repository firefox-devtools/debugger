// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Outline should render a list of functions when properties change 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="outline"
>
    <ul />
</div>,
  "nodes": Array [
    <div
      className="outline"
>
      <ul />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Outline
        sourceText={
                Object {
                        "root": "some text here",
                        "toJS": [Function],
                      }
        }
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Outline {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "sourceText": Object {
            "root": "some text here",
            "toJS": [Function],
          },
        },
        "refs": Object {},
        "state": Object {
          "symbolDeclarations": Object {
            "functions": Array [
              Object {
                "id": "my_example_function1:21",
                "value": "my_example_function1",
              },
              Object {
                "id": "my_example_function2:22",
                "value": "my_example_function2",
              },
            ],
          },
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          className="outline"
>
          <ul>
                    <li>
                              my_example_function1
                    </li>
                    <li>
                              my_example_function2
                    </li>
          </ul>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="outline"
>
          <ul>
                    <li>
                              my_example_function1
                    </li>
                    <li>
                              my_example_function2
                    </li>
          </ul>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Outline
    sourceText={
        Object {
            "root": "some text here",
            "toJS": [Function],
          }
    }
/>,
}
`;

exports[`Outline should render ignore anonimous functions 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="outline"
>
    <ul />
</div>,
  "nodes": Array [
    <div
      className="outline"
>
      <ul />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Outline
        sourceText={
                Object {
                        "root": "some text here",
                        "toJS": [Function],
                      }
        }
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Outline {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "sourceText": Object {
            "root": "some text here",
            "toJS": [Function],
          },
        },
        "refs": Object {},
        "state": Object {
          "symbolDeclarations": Object {
            "functions": Array [
              Object {
                "id": "my_example_function1:21",
                "value": "my_example_function1",
              },
              Object {
                "id": "anonymous:25",
                "value": "anonymous",
              },
            ],
          },
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          className="outline"
>
          <ul>
                    <li>
                              my_example_function1
                    </li>
          </ul>
</div>,
        "_debugID": 4,
        "_renderedOutput": <div
          className="outline"
>
          <ul>
                    <li>
                              my_example_function1
                    </li>
          </ul>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Outline
    sourceText={
        Object {
            "root": "some text here",
            "toJS": [Function],
          }
    }
/>,
}
`;
