// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Frame library frame 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <li
    className="frame selected"
    onContextMenu={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    tabIndex={0}
>
    <div
        className="title"
    >
        updateEvents
    </div>
    <div
        className="location"
    >
        backbone
        <InlineSVG
            className="backbone annotation-logo"
            element="i"
            raw={false}
            src="<svg></svg>"
        />
    </div>
</li>,
  "nodes": Array [
    <li
      className="frame selected"
      onContextMenu={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      tabIndex={0}
>
      <div
            className="title"
      >
            updateEvents
      </div>
      <div
            className="location"
      >
            backbone
            <InlineSVG
                  className="backbone annotation-logo"
                  element="i"
                  raw={false}
                  src="<svg></svg>"
            />
      </div>
</li>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Frame
        contextTypes={Object {}}
        copyStackTrace={[Function]}
        frame={
                Object {
                        "displayName": "updateEvents",
                        "frameworkGroupingOn": false,
                        "id": 3,
                        "library": "backbone",
                        "location": Object {
                          "line": 12,
                        },
                        "source": Object {
                          "url": "backbone.js",
                        },
                        "toggleFrameworkGrouping": [Function],
                      }
        }
        hideLocation={false}
        selectFrame={[Function]}
        selectedFrame={
                Object {
                        "displayName": "updateEvents",
                        "frameworkGroupingOn": false,
                        "id": 3,
                        "library": "backbone",
                        "location": Object {
                          "line": 12,
                        },
                        "source": Object {
                          "url": "backbone.js",
                        },
                        "toggleFrameworkGrouping": [Function],
                      }
        }
        shouldMapDisplayName={true}
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FrameComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "contextTypes": Object {},
          "copyStackTrace": [Function],
          "frame": Object {
            "displayName": "updateEvents",
            "frameworkGroupingOn": false,
            "id": 3,
            "library": "backbone",
            "location": Object {
              "line": 12,
            },
            "source": Object {
              "url": "backbone.js",
            },
            "toggleFrameworkGrouping": [Function],
          },
          "hideLocation": false,
          "selectFrame": [Function],
          "selectedFrame": Object {
            "displayName": "updateEvents",
            "frameworkGroupingOn": false,
            "id": 3,
            "library": "backbone",
            "location": Object {
              "line": 12,
            },
            "source": Object {
              "url": "backbone.js",
            },
            "toggleFrameworkGrouping": [Function],
          },
          "shouldMapDisplayName": true,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <li
          className="frame selected"
          onContextMenu={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
>
          <div
                    className="title"
          >
                    updateEvents
          </div>
          <div
                    className="location"
          >
                    backbone
                    <InlineSVG
                              className="backbone annotation-logo"
                              element="i"
                              raw={false}
                              src="<svg></svg>"
                    />
          </div>
</li>,
        "_debugID": 6,
        "_renderedOutput": <li
          className="frame selected"
          onContextMenu={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
>
          <div
                    className="title"
          >
                    updateEvents
          </div>
          <div
                    className="location"
          >
                    backbone
                    <InlineSVG
                              className="backbone annotation-logo"
                              element="i"
                              raw={false}
                              src="<svg></svg>"
                    />
          </div>
</li>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Frame
    contextTypes={Object {}}
    copyStackTrace={[Function]}
    frame={
        Object {
            "displayName": "updateEvents",
            "frameworkGroupingOn": false,
            "id": 3,
            "library": "backbone",
            "location": Object {
              "line": 12,
            },
            "source": Object {
              "url": "backbone.js",
            },
            "toggleFrameworkGrouping": [Function],
          }
    }
    hideLocation={false}
    selectFrame={[Function]}
    selectedFrame={
        Object {
            "displayName": "updateEvents",
            "frameworkGroupingOn": false,
            "id": 3,
            "library": "backbone",
            "location": Object {
              "line": 12,
            },
            "source": Object {
              "url": "backbone.js",
            },
            "toggleFrameworkGrouping": [Function],
          }
    }
    shouldMapDisplayName={true}
/>,
}
`;

exports[`Frame user frame (not selected) 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <li
    className="frame"
    onContextMenu={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    tabIndex={0}
>
    <div
        className="title"
    >
        renderFoo
    </div>
    <div
        className="location"
    >
        foo-view.js: 10
    </div>
</li>,
  "nodes": Array [
    <li
      className="frame"
      onContextMenu={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      tabIndex={0}
>
      <div
            className="title"
      >
            renderFoo
      </div>
      <div
            className="location"
      >
            foo-view.js: 10
      </div>
</li>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Frame
        contextTypes={Object {}}
        copyStackTrace={[Function]}
        frame={
                Object {
                        "displayName": "renderFoo",
                        "frameworkGroupingOn": false,
                        "id": 1,
                        "library": false,
                        "location": Object {
                          "line": 10,
                        },
                        "source": Object {
                          "url": "foo-view.js",
                        },
                        "toggleFrameworkGrouping": [Function],
                      }
        }
        hideLocation={false}
        selectFrame={[Function]}
        selectedFrame={
                Object {
                        "displayName": "renderFoo",
                        "frameworkGroupingOn": false,
                        "id": 2,
                        "library": false,
                        "location": Object {
                          "line": 10,
                        },
                        "source": Object {
                          "url": "foo-view.js",
                        },
                        "toggleFrameworkGrouping": [Function],
                      }
        }
        shouldMapDisplayName={true}
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FrameComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "contextTypes": Object {},
          "copyStackTrace": [Function],
          "frame": Object {
            "displayName": "renderFoo",
            "frameworkGroupingOn": false,
            "id": 1,
            "library": false,
            "location": Object {
              "line": 10,
            },
            "source": Object {
              "url": "foo-view.js",
            },
            "toggleFrameworkGrouping": [Function],
          },
          "hideLocation": false,
          "selectFrame": [Function],
          "selectedFrame": Object {
            "displayName": "renderFoo",
            "frameworkGroupingOn": false,
            "id": 2,
            "library": false,
            "location": Object {
              "line": 10,
            },
            "source": Object {
              "url": "foo-view.js",
            },
            "toggleFrameworkGrouping": [Function],
          },
          "shouldMapDisplayName": true,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <li
          className="frame"
          onContextMenu={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
>
          <div
                    className="title"
          >
                    renderFoo
          </div>
          <div
                    className="location"
          >
                    foo-view.js: 10
          </div>
</li>,
        "_debugID": 4,
        "_renderedOutput": <li
          className="frame"
          onContextMenu={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
>
          <div
                    className="title"
          >
                    renderFoo
          </div>
          <div
                    className="location"
          >
                    foo-view.js: 10
          </div>
</li>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Frame
    contextTypes={Object {}}
    copyStackTrace={[Function]}
    frame={
        Object {
            "displayName": "renderFoo",
            "frameworkGroupingOn": false,
            "id": 1,
            "library": false,
            "location": Object {
              "line": 10,
            },
            "source": Object {
              "url": "foo-view.js",
            },
            "toggleFrameworkGrouping": [Function],
          }
    }
    hideLocation={false}
    selectFrame={[Function]}
    selectedFrame={
        Object {
            "displayName": "renderFoo",
            "frameworkGroupingOn": false,
            "id": 2,
            "library": false,
            "location": Object {
              "line": 10,
            },
            "source": Object {
              "url": "foo-view.js",
            },
            "toggleFrameworkGrouping": [Function],
          }
    }
    shouldMapDisplayName={true}
/>,
}
`;

exports[`Frame user frame 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <li
    className="frame selected"
    onContextMenu={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    tabIndex={0}
>
    <div
        className="title"
    >
        renderFoo
    </div>
    <div
        className="location"
    >
        foo-view.js: 10
    </div>
</li>,
  "nodes": Array [
    <li
      className="frame selected"
      onContextMenu={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      tabIndex={0}
>
      <div
            className="title"
      >
            renderFoo
      </div>
      <div
            className="location"
      >
            foo-view.js: 10
      </div>
</li>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Frame
        contextTypes={Object {}}
        copyStackTrace={[Function]}
        frame={
                Object {
                        "displayName": "renderFoo",
                        "frameworkGroupingOn": false,
                        "id": 1,
                        "library": false,
                        "location": Object {
                          "line": 10,
                        },
                        "source": Object {
                          "url": "foo-view.js",
                        },
                        "toggleFrameworkGrouping": [Function],
                      }
        }
        hideLocation={false}
        selectFrame={[Function]}
        selectedFrame={
                Object {
                        "displayName": "renderFoo",
                        "frameworkGroupingOn": false,
                        "id": 1,
                        "library": false,
                        "location": Object {
                          "line": 10,
                        },
                        "source": Object {
                          "url": "foo-view.js",
                        },
                        "toggleFrameworkGrouping": [Function],
                      }
        }
        shouldMapDisplayName={true}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": FrameComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "contextTypes": Object {},
          "copyStackTrace": [Function],
          "frame": Object {
            "displayName": "renderFoo",
            "frameworkGroupingOn": false,
            "id": 1,
            "library": false,
            "location": Object {
              "line": 10,
            },
            "source": Object {
              "url": "foo-view.js",
            },
            "toggleFrameworkGrouping": [Function],
          },
          "hideLocation": false,
          "selectFrame": [Function],
          "selectedFrame": Object {
            "displayName": "renderFoo",
            "frameworkGroupingOn": false,
            "id": 1,
            "library": false,
            "location": Object {
              "line": 10,
            },
            "source": Object {
              "url": "foo-view.js",
            },
            "toggleFrameworkGrouping": [Function],
          },
          "shouldMapDisplayName": true,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <li
          className="frame selected"
          onContextMenu={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
>
          <div
                    className="title"
          >
                    renderFoo
          </div>
          <div
                    className="location"
          >
                    foo-view.js: 10
          </div>
</li>,
        "_debugID": 2,
        "_renderedOutput": <li
          className="frame selected"
          onContextMenu={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
>
          <div
                    className="title"
          >
                    renderFoo
          </div>
          <div
                    className="location"
          >
                    foo-view.js: 10
          </div>
</li>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Frame
    contextTypes={Object {}}
    copyStackTrace={[Function]}
    frame={
        Object {
            "displayName": "renderFoo",
            "frameworkGroupingOn": false,
            "id": 1,
            "library": false,
            "location": Object {
              "line": 10,
            },
            "source": Object {
              "url": "foo-view.js",
            },
            "toggleFrameworkGrouping": [Function],
          }
    }
    hideLocation={false}
    selectFrame={[Function]}
    selectedFrame={
        Object {
            "displayName": "renderFoo",
            "frameworkGroupingOn": false,
            "id": 1,
            "library": false,
            "location": Object {
              "line": 10,
            },
            "source": Object {
              "url": "foo-view.js",
            },
            "toggleFrameworkGrouping": [Function],
          }
    }
    shouldMapDisplayName={true}
/>,
}
`;
