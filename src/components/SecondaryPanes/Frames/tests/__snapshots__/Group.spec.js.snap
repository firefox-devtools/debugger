// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Group displays a group 1`] = `
<div
  className="frames-group"
  onContextMenu={[Function]}
>
  <div
    className="group"
    key="frame"
    onClick={[Function]}
    role="listitem"
    tabIndex={0}
    title="Show Back frames"
  >
    <FrameIndent />
    <FrameLocation
      expanded={false}
      frame={
        Object {
          "displayName": "foo",
          "generatedLocation": Object {
            "line": 4,
            "sourceId": "source",
          },
          "id": "frame",
          "library": "Back",
          "location": Object {
            "line": 4,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "url",
            "text": "",
            "url": "url",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
    />
    <span
      className="clipboard-only"
    >
       
    </span>
    <Badge>
      1
    </Badge>
    <br
      className="clipboard-only"
    />
  </div>
</div>
`;

exports[`Group passes the getFrameTitle prop to the Frame components 1`] = `
<div
  className="frames-group expanded"
  onContextMenu={[Function]}
>
  <div
    className="group"
    key="1"
    onClick={[Function]}
    role="listitem"
    tabIndex={0}
    title="Collapse Back frames"
  >
    <FrameIndent />
    <FrameLocation
      expanded={true}
      frame={
        Object {
          "displayName": "renderFoo",
          "generatedLocation": Object {
            "line": 55,
            "sourceId": "source",
          },
          "id": "1",
          "library": "Back",
          "location": Object {
            "line": 55,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "http://myfile.com/mahscripts.js",
            "text": "",
            "url": "http://myfile.com/mahscripts.js",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
    />
    <span
      className="clipboard-only"
    >
       
    </span>
    <Badge>
      3
    </Badge>
    <br
      className="clipboard-only"
    />
  </div>
  <div
    className="frames-list"
  >
    <FrameIndent />
    <Frame
      copyStackTrace={[MockFunction]}
      disableContextMenu={false}
      displayFullUrl={false}
      frame={
        Object {
          "displayName": "renderFoo",
          "generatedLocation": Object {
            "line": 55,
            "sourceId": "source",
          },
          "id": "1",
          "library": "Back",
          "location": Object {
            "line": 55,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "http://myfile.com/mahscripts.js",
            "text": "",
            "url": "http://myfile.com/mahscripts.js",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      frameworkGroupingOn={true}
      getFrameTitle={[Function]}
      hideLocation={true}
      key="1"
      selectFrame={[MockFunction]}
      selectable={true}
      selectedFrame={
        Object {
          "displayName": "foo",
          "generatedLocation": Object {
            "line": 4,
            "sourceId": "source",
          },
          "id": "frame",
          "library": "Back",
          "location": Object {
            "line": 4,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "url",
            "text": "",
            "url": "url",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      shouldMapDisplayName={false}
      toggleBlackBox={[MockFunction]}
      toggleFrameworkGrouping={[MockFunction]}
    />
    <FrameIndent />
    <Frame
      copyStackTrace={[MockFunction]}
      disableContextMenu={false}
      displayFullUrl={false}
      frame={
        Object {
          "displayName": "a",
          "generatedLocation": Object {
            "line": 55,
            "sourceId": "source",
          },
          "id": "2",
          "library": "Back",
          "location": Object {
            "line": 55,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "http://myfile.com/back.js",
            "text": "",
            "url": "http://myfile.com/back.js",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      frameworkGroupingOn={true}
      getFrameTitle={[Function]}
      hideLocation={true}
      key="2"
      selectFrame={[MockFunction]}
      selectable={true}
      selectedFrame={
        Object {
          "displayName": "foo",
          "generatedLocation": Object {
            "line": 4,
            "sourceId": "source",
          },
          "id": "frame",
          "library": "Back",
          "location": Object {
            "line": 4,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "url",
            "text": "",
            "url": "url",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      shouldMapDisplayName={false}
      toggleBlackBox={[MockFunction]}
      toggleFrameworkGrouping={[MockFunction]}
    />
    <FrameIndent />
    <Frame
      copyStackTrace={[MockFunction]}
      disableContextMenu={false}
      displayFullUrl={false}
      frame={
        Object {
          "displayName": "b",
          "generatedLocation": Object {
            "line": 55,
            "sourceId": "source",
          },
          "id": "3",
          "library": "Back",
          "location": Object {
            "line": 55,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "http://myfile.com/back.js",
            "text": "",
            "url": "http://myfile.com/back.js",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      frameworkGroupingOn={true}
      getFrameTitle={[Function]}
      hideLocation={true}
      key="3"
      selectFrame={[MockFunction]}
      selectable={true}
      selectedFrame={
        Object {
          "displayName": "foo",
          "generatedLocation": Object {
            "line": 4,
            "sourceId": "source",
          },
          "id": "frame",
          "library": "Back",
          "location": Object {
            "line": 4,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "url",
            "text": "",
            "url": "url",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      shouldMapDisplayName={false}
      toggleBlackBox={[MockFunction]}
      toggleFrameworkGrouping={[MockFunction]}
    />
  </div>
</div>
`;

exports[`Group renders group with anonymous functions 1`] = `
<div
  className="frames-group"
  onContextMenu={[Function]}
>
  <div
    className="group"
    key="1"
    onClick={[Function]}
    role="listitem"
    tabIndex={0}
    title="Show Back frames"
  >
    <FrameIndent />
    <FrameLocation
      expanded={false}
      frame={
        Object {
          "displayName": "display-1",
          "generatedLocation": Object {
            "line": 55,
            "sourceId": "source",
          },
          "id": "1",
          "library": "Back",
          "location": Object {
            "line": 55,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "http://myfile.com/mahscripts.js",
            "text": "",
            "url": "http://myfile.com/mahscripts.js",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
    />
    <span
      className="clipboard-only"
    >
       
    </span>
    <Badge>
      3
    </Badge>
    <br
      className="clipboard-only"
    />
  </div>
</div>
`;

exports[`Group renders group with anonymous functions 2`] = `
<div
  className="frames-group expanded"
  onContextMenu={[Function]}
>
  <div
    className="group"
    key="1"
    onClick={[Function]}
    role="listitem"
    tabIndex={0}
    title="Collapse Back frames"
  >
    <FrameIndent />
    <FrameLocation
      expanded={true}
      frame={
        Object {
          "displayName": "display-1",
          "generatedLocation": Object {
            "line": 55,
            "sourceId": "source",
          },
          "id": "1",
          "library": "Back",
          "location": Object {
            "line": 55,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "http://myfile.com/mahscripts.js",
            "text": "",
            "url": "http://myfile.com/mahscripts.js",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
    />
    <span
      className="clipboard-only"
    >
       
    </span>
    <Badge>
      3
    </Badge>
    <br
      className="clipboard-only"
    />
  </div>
  <div
    className="frames-list"
  >
    <FrameIndent />
    <Frame
      copyStackTrace={[MockFunction]}
      disableContextMenu={false}
      displayFullUrl={false}
      frame={
        Object {
          "displayName": "display-1",
          "generatedLocation": Object {
            "line": 55,
            "sourceId": "source",
          },
          "id": "1",
          "library": "Back",
          "location": Object {
            "line": 55,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "http://myfile.com/mahscripts.js",
            "text": "",
            "url": "http://myfile.com/mahscripts.js",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      frameworkGroupingOn={true}
      hideLocation={true}
      key="1"
      selectFrame={[MockFunction]}
      selectable={true}
      selectedFrame={
        Object {
          "displayName": "foo",
          "generatedLocation": Object {
            "line": 4,
            "sourceId": "source",
          },
          "id": "frame",
          "library": "Back",
          "location": Object {
            "line": 4,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "url",
            "text": "",
            "url": "url",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      shouldMapDisplayName={false}
      toggleBlackBox={[MockFunction]}
      toggleFrameworkGrouping={[MockFunction]}
    />
    <FrameIndent />
    <Frame
      copyStackTrace={[MockFunction]}
      disableContextMenu={false}
      displayFullUrl={false}
      frame={
        Object {
          "displayName": "display-2",
          "generatedLocation": Object {
            "line": 55,
            "sourceId": "source",
          },
          "id": "2",
          "library": "Back",
          "location": Object {
            "line": 55,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "http://myfile.com/back.js",
            "text": "",
            "url": "http://myfile.com/back.js",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      frameworkGroupingOn={true}
      hideLocation={true}
      key="2"
      selectFrame={[MockFunction]}
      selectable={true}
      selectedFrame={
        Object {
          "displayName": "foo",
          "generatedLocation": Object {
            "line": 4,
            "sourceId": "source",
          },
          "id": "frame",
          "library": "Back",
          "location": Object {
            "line": 4,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "url",
            "text": "",
            "url": "url",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      shouldMapDisplayName={false}
      toggleBlackBox={[MockFunction]}
      toggleFrameworkGrouping={[MockFunction]}
    />
    <FrameIndent />
    <Frame
      copyStackTrace={[MockFunction]}
      disableContextMenu={false}
      displayFullUrl={false}
      frame={
        Object {
          "displayName": "display-3",
          "generatedLocation": Object {
            "line": 55,
            "sourceId": "source",
          },
          "id": "3",
          "library": "Back",
          "location": Object {
            "line": 55,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "http://myfile.com/back.js",
            "text": "",
            "url": "http://myfile.com/back.js",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      frameworkGroupingOn={true}
      hideLocation={true}
      key="3"
      selectFrame={[MockFunction]}
      selectable={true}
      selectedFrame={
        Object {
          "displayName": "foo",
          "generatedLocation": Object {
            "line": 4,
            "sourceId": "source",
          },
          "id": "frame",
          "library": "Back",
          "location": Object {
            "line": 4,
            "sourceId": "source",
          },
          "scope": Object {
            "actor": "scope-actor",
            "bindings": Object {
              "arguments": Array [],
              "variables": Object {},
            },
            "function": null,
            "object": null,
            "parent": null,
            "type": "block",
          },
          "source": Object {
            "contentType": "text/javascript",
            "id": "source",
            "introductionUrl": null,
            "isBlackBoxed": false,
            "isPrettyPrinted": false,
            "isWasm": false,
            "loadedState": "unloaded",
            "relativeUrl": "url",
            "text": "",
            "url": "url",
          },
          "this": Object {},
          "thread": "FakeThread",
        }
      }
      shouldMapDisplayName={false}
      toggleBlackBox={[MockFunction]}
      toggleFrameworkGrouping={[MockFunction]}
    />
  </div>
</div>
`;
