{"version":3,"sources":["webpack:///webpack/bootstrap 4f282b30eeca6ec69a5d","webpack:///./increment/example.js","webpack:///./increment/increment.js","webpack:///./increment/math.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;;;;;;ACAA;AACA;AACA;AACA,G;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA,G","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4f282b30eeca6ec69a5d\n **/","window.inc = require('./increment').increment;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./increment/example.js\n ** module id = 0\n ** module chunks = 0\n **/","var add = require('./math').add;\nexports.increment = function(val) {\n    return add(val, 1);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./increment/increment.js\n ** module id = 1\n ** module chunks = 0\n **/","exports.add = function() {\n    var sum = 0, i = 0, args = arguments, l = args.length;\n    while (i < l) {\n        sum += args[i++];\n    }\n    return sum;\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./increment/math.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}