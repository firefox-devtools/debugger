const fs = require("fs");
const path = require("path");
const _ = require("lodash");

const fixtures = path.join(__dirname, "fixtures");

const tests = fs.readdirSync(fixtures).map(name => {
  if (name[0] === ".") return;

  const dirname = path.relative(__dirname, path.join(fixtures, name));

  const inputTS = path.join(dirname, "input.ts");
  const inputJS = path.join(dirname, "input.js");

  return {
    name: _.camelCase(name),
    dirname,
    input: `./${fs.existsSync(inputTS) ? inputTS : inputJS}`,
    output: path.join(dirname, "output.js")
  };
}).filter(Boolean);

const html = path.join(__dirname, "..", "doc-babel.html");

fs.writeFileSync(
  html,
  fs.readFileSync(html, "utf8").replace(
    /\n\s*<!-- INJECTED-START[\s\S]*INJECTED-END -->\n/,
    `
    <!-- INJECTED-START -->
    <!--
      Content generated by examples/babel/webpack.config.js.
      Run "yarn build" to update.
    -->${tests
      .map(
        ({ name, output }) =>
          `\n    <script src="${path.join("babel", output)}"></script>` +
          `\n    <button onclick="${name}()">Run ${name}</button>`
      )
      .join("")}
    <!-- INJECTED-END -->
`
  )
);

module.exports = [
  {
    context: __dirname,
    entry: "babel-polyfill",
    output: {
      filename: "polyfill-bundle.js"
    }
  }
].concat(
  tests.map(({ name, dirname, input, output }) => {
    const babelEnabled = name !== "webpackStandalone";
    const babelEnv = !name.match(/Es6/);
    const babelModules = name !== "webpackModules";
    const devtool =
      name === "evalSourceMaps" ? "eval-source-map" : "source-map";

    return {
      context: __dirname,
      entry: input,
      output: {
        path: __dirname,
        filename: output,

        libraryTarget: "var",
        library: name
      },
      devtool,
      module: {
        loaders: [
          babelEnabled
            ? {
                test: /\.js$/,
                exclude: /node_modules/,
                loader: "babel-loader",
                options: {
                  babelrc: false,
                  presets: babelEnv
                    ? [["env", { modules: babelModules ? "commonjs" : false }]]
                    : [],
                  plugins:
                    (babelEnv && babelModules ? ["add-module-exports"] : []).concat([
                      "babel-plugin-transform-flow-strip-types",
                    ])
                }
              }
            : null,
          {
            test: /\.tsx?$/,
            exclude: /node_modules/,
            loader: "ts-loader",
            options: {}
          }
        ].filter(Boolean)
      }
    };
  })
);
