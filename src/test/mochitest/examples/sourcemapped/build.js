#!env node

const fs = require("fs");
const path = require("path");
const _ = require("lodash");
const rollup = require("rollup");
const rollupBabel = require("rollup-plugin-babel");
const webpack = require("webpack");

const fixtures = path.join(__dirname, "fixtures");

const tests = fs.readdirSync(fixtures).map(name => {
  if (name[0] === ".") return;

  const dirname = path.relative(__dirname, path.join(fixtures, name));

  const inputTS = path.join(dirname, "input.ts");
  const inputJS = path.join(dirname, "input.js");

  return {
    name,
    camelName: _.camelCase(name),
    dirname,
    input: `./${fs.existsSync(inputTS) ? inputTS : inputJS}`,
    output: path.join(dirname, "output.js")
  };
}).filter(Boolean);

const html = path.join(__dirname, "..", "doc-sourcemapped.html");

fs.writeFileSync(
  html,
  fs.readFileSync(html, "utf8").replace(
    /\n\s*<!-- INJECTED-START[\s\S]*INJECTED-END -->\n/,
    `
    <!-- INJECTED-START -->
    <!--
      Content generated by examples/sourcemapped/build.js.
      Run "yarn build" to update.
    -->${tests
      .map(
        ({ name, camelName, output }) =>
          `\n    <script src="${path.join("sourcemapped", output)}"></script>` +
          `\n    <button onclick="${camelName}()">Run ${name}</button>`
      )
      .join("")}
    <!-- INJECTED-END -->
`
  )
);

function runWebpack(config) {
  webpack(config, (err, res) => {
    if (err) throw err;

    console.log(res.toString());
  });
}

runWebpack({
  context: __dirname,
  entry: "babel-polyfill",
  output: {
    filename: "polyfill-bundle.js"
  }
});

for (const { name, camelName, dirname, input, output } of tests) {
  const rollupBuildEnabled = name.match(/rollup-/);
  const babelEnabled = name.match(/babel-/);
  const babelEnv = !name.match(/-es6/);
  const babelModules = name.match(/-cjs/);
  const evalMaps = name.match(/-eval/);

  if (!babelEnabled && babelModules) {
    throw new Error(
      "Babel is not enabled, compiling to CommonJS is not possible in " + name
    );
  }

  const babelOptions = babelEnabled && {
    babelrc: false,
    presets: babelEnv
      ? [["env", { modules: babelModules ? "commonjs" : false }]]
      : [],
    plugins: [
      "babel-plugin-transform-flow-strip-types",
    ]
  };

  if (rollupBuildEnabled) {
    (async function() {
      const bundle = await rollup.rollup({
        input: "fake-bundle-root",
        plugins: [
          // Our input file may export more than the default, but we
          // want to enable 'exports: "default",' so we need the root
          // import to only have a default export.
          {
            resolveId: id => id === "fake-bundle-root" ? id : undefined,
            load: id => id === "fake-bundle-root"
              ? `import test from "${path.join(__dirname, input)}"; export default test;`
              : undefined,
          },
          babelOptions && rollupBabel(babelOptions)
        ].filter(Boolean),
      });

      await bundle.write({
        file: output,
        dir: dirname,
        format: "iife",
        name: camelName,
        sourcemap: true,
        exports: "default",
      });
    })();
    continue;
  }

  runWebpack({
    context: __dirname,
    entry: input,
    output: {
      path: __dirname,
      filename: output,

      libraryTarget: "var",
      library: camelName,
      libraryExport: "default"
    },
    devtool: evalMaps ? "eval-source-map" : "source-map",
    module: {
      loaders: [
        babelOptions && {
          test: /\.js$/,
          exclude: /node_modules/,
          loader: "babel-loader",
          options: babelOptions,
        },
        {
          test: /\.tsx?$/,
          exclude: /node_modules/,
          loader: "ts-loader",
          options: {}
        }
      ].filter(Boolean)
    }
  });
}
