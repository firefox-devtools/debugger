// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`project text search should clear all the search results 1`] = `
Array [
  Object {
    "filepath": "http://localhost:8000/examples/foo1",
    "matches": Array [
      Object {
        "column": 9,
        "line": 1,
        "match": "foo",
        "sourceId": "foo1",
        "type": "MATCH",
        "value": "function foo1() {",
      },
      Object {
        "column": 8,
        "line": 2,
        "match": "foo",
        "sourceId": "foo1",
        "type": "MATCH",
        "value": "  const foo = 5; return foo;",
      },
      Object {
        "column": 24,
        "line": 2,
        "match": "foo",
        "sourceId": "foo1",
        "type": "MATCH",
        "value": "  const foo = 5; return foo;",
      },
    ],
    "sourceId": "foo1",
    "type": "RESULT",
  },
]
`;

exports[`project text search should clear all the search results 2`] = `Array []`;

exports[`project text search should close project search 1`] = `
Array [
  Object {
    "filepath": "http://localhost:8000/examples/foo1",
    "matches": Array [
      Object {
        "column": 9,
        "line": 1,
        "match": "foo",
        "sourceId": "foo1",
        "type": "MATCH",
        "value": "function foo1() {",
      },
      Object {
        "column": 8,
        "line": 2,
        "match": "foo",
        "sourceId": "foo1",
        "type": "MATCH",
        "value": "  const foo = 5; return foo;",
      },
      Object {
        "column": 24,
        "line": 2,
        "match": "foo",
        "sourceId": "foo1",
        "type": "MATCH",
        "value": "  const foo = 5; return foo;",
      },
    ],
    "sourceId": "foo1",
    "type": "RESULT",
  },
]
`;

exports[`project text search should close project search 2`] = `Array []`;

exports[`project text search should ignore sources with minified versions 1`] = `
Array [
  Object {
    "filepath": "http://localhost:8000/examples/bar:formatted",
    "matches": Array [
      Object {
        "column": 9,
        "line": 1,
        "match": "bla",
        "sourceId": "bar:formatted",
        "type": "MATCH",
        "value": "function bla(x, y) {",
      },
    ],
    "sourceId": "bar:formatted",
    "type": "RESULT",
  },
]
`;

exports[`project text search should search a specific source 1`] = `
Array [
  Object {
    "filepath": "http://localhost:8000/examples/bar",
    "matches": Array [
      Object {
        "column": 9,
        "line": 1,
        "match": "bla",
        "sourceId": "bar",
        "type": "MATCH",
        "value": "function bla(x, y) {",
      },
    ],
    "sourceId": "bar",
    "type": "RESULT",
  },
]
`;

exports[`project text search should search all the loaded sources based on the query 1`] = `
Array [
  Object {
    "filepath": "http://localhost:8000/examples/foo1",
    "matches": Array [
      Object {
        "column": 9,
        "line": 1,
        "match": "foo",
        "sourceId": "foo1",
        "type": "MATCH",
        "value": "function foo1() {",
      },
      Object {
        "column": 8,
        "line": 2,
        "match": "foo",
        "sourceId": "foo1",
        "type": "MATCH",
        "value": "  const foo = 5; return foo;",
      },
      Object {
        "column": 24,
        "line": 2,
        "match": "foo",
        "sourceId": "foo1",
        "type": "MATCH",
        "value": "  const foo = 5; return foo;",
      },
    ],
    "sourceId": "foo1",
    "type": "RESULT",
  },
  Object {
    "filepath": "http://localhost:8000/examples/foo2",
    "matches": Array [
      Object {
        "column": 9,
        "line": 1,
        "match": "foo",
        "sourceId": "foo2",
        "type": "MATCH",
        "value": "function foo2(x, y) {",
      },
    ],
    "sourceId": "foo2",
    "type": "RESULT",
  },
]
`;
